# GitLab CI/CD Pipeline for Zuora Event Handler
# Auto-deploy to QA when merged to develop branch
# Auto-deploy to Production when merged to main branch

stages:
  - test
  - build
  - deploy-qa
  - deploy-prod

variables:
  # AWS設定
  AWS_DEFAULT_REGION: "ap-northeast-1"
  # Java設定
  JAVA_VERSION: "21"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

# =============================================================================
# テストステージ（全ブランチで実行）
# =============================================================================
test:
  stage: test
  image: openjdk:21-jdk
  before_script:
    - cd ZuoraEventHandler
    - chmod +x ./gradlew
  script:
    - ./gradlew test --no-daemon
  artifacts:
    reports:
      junit: ZuoraEventHandler/build/test-results/test/*.xml
    paths:
      - ZuoraEventHandler/build/reports/tests/
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"

# =============================================================================
# ビルドステージ
# =============================================================================
build:
  stage: build
  image: openjdk:21-jdk
  before_script:
    - cd ZuoraEventHandler
    - chmod +x ./gradlew
  script:
    - ./gradlew build --no-daemon
  artifacts:
    paths:
      - ZuoraEventHandler/build/libs/
      - ZuoraEventHandler/build/distributions/
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"

# =============================================================================
# QA環境デプロイ（developブランチ）
# =============================================================================
deploy-qa:
  stage: deploy-qa
  image: 
    name: public.ecr.aws/sam/build-provided.al2:latest
    entrypoint: [""]
  before_script:
    # AWS CLI設定
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    # Java環境設定
    - export JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto
    - export PATH=$JAVA_HOME/bin:$PATH
    - java -version
  script:
    - echo "QA環境へのデプロイを開始します"
    - sam build --template-file template.yaml
    - sam deploy --config-env qa --no-confirm-changeset
    - echo "QA環境へのデプロイが完了しました"
    - echo "スタック名: qa-zuora-event-handler"
  environment:
    name: qa
    url: https://console.aws.amazon.com/cloudformation/home?region=ap-northeast-1#/stacks/stackinfo?stackId=qa-zuora-event-handler
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  dependencies:
    - build
  needs:
    - build

# =============================================================================
# 本番環境デプロイ（mainブランチ、手動実行）
# =============================================================================
deploy-prod:
  stage: deploy-prod
  image: 
    name: public.ecr.aws/sam/build-provided.al2:latest
    entrypoint: [""]
  before_script:
    # AWS CLI設定
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    # Java環境設定
    - export JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto
    - export PATH=$JAVA_HOME/bin:$PATH
    - java -version
  script:
    - echo "本番環境へのデプロイを開始します"
    - sam build --template-file template.prod.yaml
    - sam deploy --config-env prod  # confirm_changeset=trueなので手動承認が必要
    - echo "本番環境へのデプロイが完了しました"
    - echo "スタック名: prod-zuora-event-handler"
  environment:
    name: production
    url: https://console.aws.amazon.com/cloudformation/home?region=ap-northeast-1#/stacks/stackinfo?stackId=prod-zuora-event-handler
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual  # 手動実行のみ
  dependencies:
    - build
  needs:
    - build

# =============================================================================
# GitLab CI Variables that need to be set:
# Settings > CI/CD > Variables
# 
# AWS_ACCESS_KEY_ID (protected, masked)
# AWS_SECRET_ACCESS_KEY (protected, masked)
# =============================================================================
